
trigger:
- none

pool:
  vmImage: 'windows-latest'

pr:
- master

steps:
- checkout: self
  persistCredentials: true
  clean: true
- task: CmdLine@2
  inputs:
    script: |
      git config --global user.email "glushin.evgeniy@gmail.com"
      git config --global user.name "evgeniy-glushin"

      SET sourceBranch=%SYSTEM_PULLREQUEST_SOURCEBRANCH% 

      ECHO SOURCE BRANCH IS %sourceBranch%

      git checkout master
      git pull origin master

      echo git checkout %sourceBranch%
      git checkout %sourceBranch%
      git pull origin %sourceBranch%

      echo git diff --name-only HEAD@{0} HEAD@{1}
      git diff --name-only HEAD@{0} HEAD@{1}
      echo done

      echo git diff --name-only master..%sourceBranch%
      git diff --name-only master..%sourceBranch%
      echo done

      echo git diff --name-only master..%sourceBranch%
      git diff --name-only master..%sourceBranch% > diff.txt
      echo done

      echo git add ./
      git add ./

      echo git commit -m "Compare changes with the target branch"
      git commit -m "Compare changes with the target branch [skip ci]"

      echo git push origin
      git push origin

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $source=@"
        public class ArtifactsUtils
        {
            public static string Ping() { return "ArtifactsUtils is working"; }
            public static string BuildArtifacts()
            {
                var root = System.Environment.CurrentDirectory;

                var diffFilePath = System.IO.Path.Combine(root, "diff.txt");
                if(!System.IO.File.Exists(diffFilePath))
                {
                    return "Coudn't find diff.txt which is required for Artifacts. Path - " + diffFilePath;
                }

                var diff = new System.IO.StreamReader(diffFilePath);

                var artifacts = System.IO.Path.Combine(root, "Artifacts");

                // clean up if exists
                if (System.IO.Directory.Exists(artifacts))
                    System.IO.Directory.Delete(artifacts, true);

                System.IO.Directory.CreateDirectory(artifacts);

                System.Console.WriteLine("Artifacts directory has been created");

                var changedFilePath = "";
                while ((changedFilePath = diff.ReadLine()) != null)
                {
                    if (string.IsNullOrEmpty(changedFilePath) || changedFilePath == "diff.txt")
                        continue;

                    var source = System.IO.Path.Combine(root, changedFilePath);
                    var distination = System.IO.Path.Combine(artifacts, changedFilePath);

                    Copy(source, distination);
                }

                return "Artifacts directory is ready!";
            }

            private static void Copy(string src, string dst)
            {
                // file added or changed
                if (System.IO.File.Exists(src))
                {
                    CreateDirectory(dst);

                    System.IO.File.Copy(src, dst);

                    System.Console.WriteLine(src + " has been coppied to " + dst);
                }
                else // file deleted
                {
                    var dstFi = new System.IO.FileInfo(dst);
                    var deletedFileName = "[DELETED]" + dstFi.Name;
                    var deletedFilePath = System.IO.Path.Combine(dstFi.Directory.FullName, deletedFileName);

                    CreateDirectory(deletedFilePath);

                    System.IO.File.Create(deletedFilePath);
                    System.Console.WriteLine(deletedFilePath + " has been created " + dst);
                }
            }

            private static void CreateDirectory(string dst)
            {
                var dstFolder = new System.IO.FileInfo(dst).Directory.FullName;

                if (!System.IO.Directory.Exists(dstFolder))
                    System.IO.Directory.CreateDirectory(dstFolder);
            }
        }
      "@

      Add-Type -TypeDefinition $source

      [ArtifactsUtils]::BuildArtifacts()

- task: CmdLine@2
  inputs:
    script: |
      SET sourceBranch=%SYSTEM_PULLREQUEST_SOURCEBRANCH% 

      ECHO SOURCE BRANCH IS %sourceBranch%
     
      echo git checkout %sourceBranch%
      git checkout %sourceBranch%
      git pull origin %sourceBranch%
     
      echo git add ./
      git add ./

      echo git commit -m "Build the Artifacts directory"
      git commit -m "Build the Artifacts directory [skip ci]"

      echo git push origin
      git push origin
